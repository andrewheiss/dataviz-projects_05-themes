---
title: "Themes"
subtitle: "Exercise 5 --- PMAP 8551/4551, SEMESTER YEAR"
author: "YOUR NAME HERE"
date: "DATE GOES HERE"
date-format: "long"
format:
  html:
    toc: true
    knitr:
      opts_chunk: 
        dev: "ragg_png"
        dpi: 300
  typst:
    toc: true
    include-before-body: 
      text: |
        #show link: set text(fill: rgb("e16462"))

        // Keep track of previous heading levels
        #let last-heading-level = state("last-heading-level", 0)

        // Add page breaks before all level 1 headings
        // Add page breaks before level 2 headings that don't come after level 1
        #show heading: it => {
          context {
            let prev-level = last-heading-level.get()

            if it.level == 1 {
              pagebreak(weak: true)
              last-heading-level.update(1)
            } else if it.level == 2 {
              if prev-level != 1 {
                pagebreak(weak: true)
              }
              last-heading-level.update(2)
            } else {
              last-heading-level.update(it.level)
            }
          }
          it
        }
  pdf:
    toc: true
  docx:
    toc: true
---

# Task 1: Session check-in

::: {.callout-tip title="Answer"}
Hopefully you wrote some interesting and muddy things!
:::


# Task 2: Cheese!

## Data description and cleaning

This data comes from [cheese.com](https://cheese.com/), and it was a [#TidyTuesday dataset in June 2024](https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-06-04)

There are 19 columns, and [they're documented here](https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-06-04#data-dictionary)---make sure you consult that page!

The code below loads and cleans the data, resulting in a data frame named `cheeses_milk_country` that contains the number of cheeses made by the top 8 cheese-producing countries, across three types of milk. **You don't need to modify anything in this chunk of code---you only need to run it.**

```{r}
#| label: load-clean-data
#| warning: false
#| message: false

library(tidyverse)

# Load the full data
cheeses_raw <- read_csv("data/cheeses.csv")

# The milk and country columns contain multiple values, like "cow, goat" and 
# "Italy, France". separate_longer_delim() splits those into separate rows 
# based on the ",", so that "cow, goat" would turn into one row for cow and one 
# for goat, and so on
cheeses <- cheeses_raw |> 
  separate_longer_delim(milk, delim = ", ") |> 
  separate_longer_delim(country, delim = ", ") |> 
  # Technically England, Scotland, GB, and the UK are all different things, but
  # for the sake of visualization, we can lump them all together
  mutate(country = case_match(country,
    "England" ~ "United Kingdom",
    "Great Britain" ~ "United Kingdom",
    "Scotland" ~ "United Kingdom",
    .default = country
  ))

# Find the most common milk types
top_milk_types <- cheeses |> 
  group_by(milk) |> 
  summarize(total = n()) |> 
  filter(total > 100)

# Find the most common countries
top_countries <- cheeses |> 
  group_by(country) |> 
  summarize(total = n()) |> 
  filter(total > 30)

# Calculate the number of milk types across the most common countries
cheeses_milk_country <- cheeses |> 
  filter(milk %in% top_milk_types$milk, country %in% top_countries$country) |> 
  group_by(milk, country) |> 
  summarize(total = n()) |> 
  ungroup() |> 
  # Capitalize the milk types
  mutate(milk = str_to_title(milk)) |> 
  # Sort by country and milk type and lock in the order for better plotting 
  arrange(desc(total), milk) |> 
  mutate(across(c(country, milk), \(x) fct_inorder(x)))
cheeses_milk_country
```


## Base plot

Here's a basic bar chart showing the counts of countries and milk types. It's stored as an object named `base_plot`:

```{r}
#| label: base-plot

base_plot <- ggplot(
  cheeses_milk_country,
  aes(x = total, y = fct_rev(country), fill = milk)
) +
  geom_col() +
  guides(fill = "none") +
  # These colors come from ColorBrewer 2:
  # https://colorbrewer2.org/#type=qualitative&scheme=Set1&n=3
  scale_fill_brewer(palette = "Set1") +
  facet_wrap(vars(milk))
base_plot
```

### Recreate nice plot

Your job is to use `labs()` and `theme()` to recreate this plot:

```{r}
#| label: recreate-me-plot-1
#| echo: false
#| ref.label: recreation-plot-1
#| fig-width: 6
#| fig-height: 3
```

**Some helpful big hints:**

- The image is 6 inches wide and 3 inches tall. Use chunk options like `fig-width` and `fig-height` to control the dimensions (see <https://datavizf25.classes.andrewheiss.com/resource/quarto.html#chunk-options>)
- Use `labs()` to modify the following things: `x`, `y`, `title`, `subtitle`, and `caption`
- Use `theme_bw()`
- Use `theme()` to adjust these things:
  - Strip text
  - Axis title
  - Panel grid major
  - Plot title
  - Plot subtitle
  - Plot caption

In the end, your code will look something like this:

```{.r}
base_plot + 
  labs(x = "BLAH", title = "BLAH") +
  theme_bw() +
  theme(
    strip.text = element_text(BLAH),
    axis.title = element_text(BLAH)
  )
```

**MAKE SURE** you use [the theme resources and cheatsheets from the content page](https://datavizf25.classes.andrewheiss.com/content/05-content.html#readings-you-should-glance-through-and-use-as-resources). Also [consider using {ggthemeassist}](https://datavizf25.classes.andrewheiss.com/example/05-example.html#bonus-ggthemeassist) to help with the different settings.

::: {.callout-tip title="Answer"}

```{r}
#| label: recreation-plot-1
#| fig-width: 6
#| fig-height: 3

base_plot +
  labs(
    x = "Total types of cheeses", 
    y = NULL,
    title = "Cow-based cheese rules the world",
    subtitle = "Most common milk types for the top 8 cheese-producing countries",
    caption = "Source: cheese.com"
  ) +
  theme_bw() +
  theme(
    strip.text = element_text(face = "bold", hjust = 0),
    axis.title = element_text(hjust = 0),
    panel.grid.minor.x = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_text(color = "grey50"),
    plot.caption = element_text(hjust = 0, color = "grey50")
  ) 
```

:::


# Task 3: ~~Extension~~ Ugly plot

For your extension, forget all the wonderful CRAP design principles you just learned and try your hardest to **make the ugliest plot in the world**. Take `base_plot` and create the worst, ugliest, least CRAPful plot ever.

Change the colors, modify the theme, add labels, etc. and make this ugly. You can leave the `geom_col()` as is, or you can mess with it too (or even change it to a pie chart or heatmap or something if you feel up to it).

**This is your chance to play around and explore.**


::: {.callout-tip title="Answer"}

Hopefully you did something neat! Here's something I did:

```{r}
#| label: extension
#| message: false
#| fig-width: 6
#| fig-height: 3

base_plot +
  labs(
    x = "cheese", 
    y = "countries",
    title = "mooooooOOOOOOoo"
  ) +
  theme_classic(base_family = "mono") +
  theme(
    strip.text = element_text(face = "bold", hjust = 1, angle = 180),
    axis.title = element_text(hjust = 0.2, color = "orange"),
    panel.grid.minor.x = element_blank(),
    plot.title = element_text(
      face = "bold", hjust = 0.4, vjust = 0, angle = 6, color = "yellow"
    ),
    plot.subtitle = element_text(color = "grey50"),
    plot.caption = element_text(hjust = 0, color = "grey50"),
    panel.grid.major = element_line(linetype = "dashed"),
    panel.grid.minor = element_line(linetype = "longdash"),
    panel.background = element_rect(fill = "#D3FEC1"),
    plot.background = element_rect(fill = "#7E51E8"),
  )
```

:::
